name: Tests

on:

  workflow_dispatch:

  push:
    branches:
      - master
    
  pull_request:
    branches: [ "*" ]

permissions:
  contents: read


jobs:

  run_tests:

    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version:
        - "3.8"
        - "pypy3.9"
        - "pypy3.10"
        - "3.9"
        - "3.10"
        - "3.11"
        - "3.12"

    steps:

    - uses: actions/checkout@v4
      if: github.event_name == 'pull_request' || github.ref == 'refs/heads/master'

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage

    - name: Test with unittest/coverage
      run: |
        coverage run -m unittest discover
        python -m coverage json --omit "tests/*"

    - name: Upload coverage results
      uses: actions/upload-artifact@v4
      if: strategy.job-index == 0
      with:
        name: coverage
        path: coverage.json

  report_coverage:

    runs-on: ubuntu-latest
    
    needs: ['run_tests']
    
    if: github.event_name == 'pull_request' || (github.event_name == 'push' && github.ref == 'refs/heads/master')
    
    steps:

    - name: Download coverage results
      uses: actions/download-artifact@v4
      with:
        name: coverage

    - name: Install jq
      run: |
        sudo apt install jq

    - name: Fetch coverage
      id: coverage
      shell: bash
      run: |
        echo "value=$(jq -r '[.totals.percent_covered_display][0]' coverage.json)" >> $GITHUB_OUTPUT

    - name: Report coverage in pull request
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Test coverage of this pull request: ${{ steps.coverage.outputs.value }}%'
          })

    - name: Create badge
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: schneegans/dynamic-badges-action@v1.6.0
      with:
        auth: ${{ secrets.GIST_SECRET }}
        gistID: 5f8b1433a1c405da22639f817d6a38d9
        filename: pypers.json
        label: Coverage
        message: ${{ steps.coverage.outputs.value }}%
        minColorRange: 50
        maxColorRange: 90
        valColorRange: ${{ steps.coverage.outputs.value }}
